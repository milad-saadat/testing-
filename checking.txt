(set-option :print-success false)
(set-option :produce-models true)
(declare-const c_0_1 Int)
(declare-const c_1_2 Int)
(declare-const c_2_3 Int)
(declare-const s_0_5 Int)
(declare-const s_1_6 Int)
(declare-const s_2_7 Int)
(declare-const s_3_8 Int)
(declare-const lambda0_10 Int)
(declare-const lambda1_11 Int)
(declare-const lambda0_12 Int)
(declare-const lambda1_13 Int)
(declare-const lambda0_14 Int)
(declare-const lambda1_15 Int)
(declare-const lambda2_16 Int)
(declare-const lambda0_17 Int)
(declare-const lambda1_18 Int)
(declare-const lambda2_19 Int)
(declare-const lambda3_20 Int)
(declare-const lambda0_21 Int)
(declare-const lambda1_22 Int)
(declare-const lambda2_23 Int)
(declare-const lambda3_24 Int)
(declare-const lambda0_25 Int)
(declare-const lambda1_26 Int)
(declare-const lambda2_27 Int)
(declare-const lambda0_28 Int)
(declare-const lambda1_29 Int)
(declare-const lambda2_30 Int)
(declare-const lambda3_31 Int)
(declare-const lambda0_32 Int)
(declare-const lambda1_33 Int)
(declare-const lambda0_34 Int)
(declare-const lambda1_35 Int)
(declare-const lambda2_36 Int)

(assert  (= ( + ( + ( * (- (/ 1 1)) s_0_5) ( * (/ 1 1) lambda0_10)) ( * (- (/ 1 1)) lambda1_11)) 0) )
(assert  (= ( + ( * (- (/ 1 1)) s_1_6) ( * (/ 1 1) lambda1_11)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_10) 0) )
(assert  (>= ( * (/ 1 1) lambda1_11) 0) )
(assert  (= ( + ( + ( * (- (/ 1 1)) c_0_1) ( * (/ 1 1) lambda0_12)) ( * (- (/ 1 1)) lambda1_13)) 0) )
(assert  (= ( + ( * (- (/ 1 1)) c_1_2) ( * (/ 1 1) lambda1_13)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_12) 0) )
(assert  (>= ( * (/ 1 1) lambda1_13) 0) )
(assert  (= ( + ( + ( + ( * (- (/ 1 1)) s_0_5) ( * (/ 1 1) s_1_6)) ( * (/ 1 1) lambda0_14)) ( * ( * (/ 1 1) s_0_5) lambda2_16)) 0) )
(assert  (= ( + ( + ( * (- (/ 1 1)) s_1_6) ( * (/ 1 1) lambda1_15)) ( * ( * (/ 1 1) s_1_6) lambda2_16)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_14) 0) )
(assert  (>= ( * (/ 1 1) lambda1_15) 0) )
(assert  (>= ( * (/ 1 1) lambda2_16) 0) )
(assert  (= ( + ( + ( + ( + ( * (- (/ 1 1)) c_0_1) ( * (/ 1 1) c_1_2)) ( * (/ 1 1) lambda0_17)) ( * ( * (/ 1 1) c_0_1) lambda2_19)) ( * ( * (/ 1 1) s_0_5) lambda3_20)) 0) )
(assert  (= ( + ( + ( + ( * (- (/ 1 1)) c_1_2) ( * (/ 1 1) lambda1_18)) ( * ( * (/ 1 1) c_1_2) lambda2_19)) ( * ( * (/ 1 1) s_1_6) lambda3_20)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_17) 0) )
(assert  (>= ( * (/ 1 1) lambda1_18) 0) )
(assert  (>= ( * (/ 1 1) lambda2_19) 0) )
(assert  (>= ( * (/ 1 1) lambda3_20) 0) )
(assert  (= ( + ( + ( + ( + (/ 1 1) ( * (- (/ 1 1)) c_1_2)) ( * (/ 1 1) lambda0_21)) ( * ( * (/ 1 1) c_0_1) lambda2_23)) ( * ( * (/ 1 1) s_0_5) lambda3_24)) 0) )
(assert  (= ( + ( + ( * (/ 1 1) lambda1_22) ( * ( * (/ 1 1) c_1_2) lambda2_23)) ( * ( * (/ 1 1) s_1_6) lambda3_24)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_21) 0) )
(assert  (>= ( * (/ 1 1) lambda1_22) 0) )
(assert  (>= ( * (/ 1 1) lambda2_23) 0) )
(assert  (>= ( * (/ 1 1) lambda3_24) 0) )
(assert  (= ( + ( + ( + ( * (- (/ 1 1)) s_2_7) ( * (/ 1 1) lambda0_25)) ( * (- (/ 1 1)) lambda1_26)) ( * ( * (/ 1 1) s_0_5) lambda2_27)) 0) )
(assert  (= ( + ( + ( * (- (/ 1 1)) s_3_8) ( * (- (/ 1 1)) lambda1_26)) ( * ( * (/ 1 1) s_1_6) lambda2_27)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_25) 0) )
(assert  (>= ( * (/ 1 1) lambda1_26) 0) )
(assert  (>= ( * (/ 1 1) lambda2_27) 0) )
(assert  (= ( + ( + ( + ( + ( * (- (/ 1 1)) c_2_3) ( * (/ 1 1) lambda0_28)) ( * (- (/ 1 1)) lambda1_29)) ( * ( * (/ 1 1) c_0_1) lambda2_30)) ( * ( * (/ 1 1) s_0_5) lambda3_31)) 0) )
(assert  (= ( + ( + ( + (/ 0 1) ( * (- (/ 1 1)) lambda1_29)) ( * ( * (/ 1 1) c_1_2) lambda2_30)) ( * ( * (/ 1 1) s_1_6) lambda3_31)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_28) 0) )
(assert  (>= ( * (/ 1 1) lambda1_29) 0) )
(assert  (>= ( * (/ 1 1) lambda2_30) 0) )
(assert  (>= ( * (/ 1 1) lambda3_31) 0) )
(assert  (= ( + ( + ( * (- (/ 1 1)) s_2_7) ( * (/ 1 1) lambda0_32)) ( * ( * (/ 1 1) s_2_7) lambda1_33)) 0) )
(assert  (= ( + ( * (- (/ 1 1)) s_3_8) ( * ( * (/ 1 1) s_3_8) lambda1_33)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_32) 0) )
(assert  (>= ( * (/ 1 1) lambda1_33) 0) )
(assert  (= ( + ( + ( + ( * (- (/ 1 1)) c_2_3) ( * (/ 1 1) lambda0_34)) ( * ( * (/ 1 1) c_2_3) lambda1_35)) ( * ( * (/ 1 1) s_2_7) lambda2_36)) 0) )
(assert  (= ( + ( + (/ 0 1) ( * (/ 0 1) lambda1_35)) ( * ( * (/ 1 1) s_3_8) lambda2_36)) 0) )
(assert  (>= ( * (/ 1 1) lambda0_34) 0) )
(assert  (>= ( * (/ 1 1) lambda1_35) 0) )
(assert  (>= ( * (/ 1 1) lambda2_36) 0) )

(check-sat)
(get-value(c_0_1 c_1_2 c_2_3 c_3_4 s_0_5 s_1_6 s_2_7 s_3_8))
