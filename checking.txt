(set-option :print-success false)
(set-option :produce-models true)
(declare-const c_0 Real)
(declare-const c_1 Real)
(declare-const c_2 Real)
(declare-const c_3 Real)

(assert  ( or ( and (= (* 1 1 c_1  ) 0) )  ) )
(assert  ( or ( and (= (* 1 1 c_2  ) 0) )  ) )
(assert  ( or ( and (= (* 1 1 c_3  ) 0) )  ) )
(assert  ( or ( and (> ( * 1 (+ 0 (* 1 (- 1) c_0  ) ) ) 0) )  ) )
(assert  ( or ( and (>= ( * 1 1 ) 0) )  ) )
(assert (=> ( or ( and (>= ( * 1 1 ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 1 ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 1 ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 1 ) 0) (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 1 ) 0) (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 1 ) 0) (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  )))
(assert (=> ( or ( and (>= ( * 1 (- 2) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_1  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_2  ) ) ) 0) (>= ( * 1 (+ 0 (* 1 1 c_3  ) ) ) 0) )  ) ( or ( and (>= ( * 1 (+ 0 (* 1 1 c_0  ) ) ) 0) )  )))

(check-sat)
(get-value(c_0 c_1 c_2 c_3))
