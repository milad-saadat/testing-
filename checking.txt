(set-option :print-success false)
(set-option :produce-models true)
(declare-const c_0 Int)
(declare-const c_1 Int)
(declare-const c_2 Int)
(declare-const c_3 Int)
(declare-const c_4 Int)
(declare-const c_5 Int)
(declare-const c_6 Int)
(declare-const c_7 Int)
(declare-const s_0 Int)
(declare-const s_1 Int)
(declare-const s_2 Int)
(declare-const s_3 Int)
(declare-const s_4 Int)
(declare-const s_5 Int)
(declare-const s_6 Int)
(declare-const s_7 Int)
(declare-const tx Int)
(declare-const x Int)
(declare-const y Int)
(declare-const y0_20 Int)
(declare-const y1_21 Int)
(declare-const y2_22 Int)
(declare-const y0_23 Int)
(declare-const y1_24 Int)
(declare-const y2_25 Int)

(assert  ( or ( and (= ( + ( * (- (/ 1 1)) c_1) ( * (/ 1 1) y2_22)) 0) (= ( + ( * (- (/ 1 1)) c_2) ( * (/ 1 1) y1_21)) 0) (= ( + ( * (- (/ 1 1)) c_0) ( * (/ 1 1) y0_20)) 0) (= ( * (- (/ 1 1)) c_3) 0) (>= ( * (/ 1 1) y0_20) 0) (>= ( * (/ 1 1) y1_21) 0) (>= ( * (/ 1 1) y2_22) 0) (> ( + (/ 0 1) ( * (/ 1 1) y1_21)) 0) )  ) )
(assert  ( or ( and (= ( + ( * (- (/ 1 1)) c_1) ( * (/ 1 1) y2_25)) 0) (= ( + ( * (- (/ 1 1)) c_2) ( * (- (/ 1 1)) y1_24)) 0) (= ( + ( + ( * (- (/ 1 1)) c_0) ( * (/ 1 1) y0_23)) ( * (/ 64 1) y1_24)) 0) (= ( * (- (/ 1 1)) c_3) 0) (>= ( * (/ 1 1) y0_23) 0) (>= ( * (/ 1 1) y1_24) 0) (>= ( * (/ 1 1) y2_25) 0) (> (/ 0 1) 0) )  ) )
(assert  ( or ( and (> ( * (/ 1 1) c_0) 0) )  ) )

(check-sat)
(get-value(c_0 c_1 c_2 c_3 c_4 c_5 c_6 c_7 s_0 s_1 s_2 s_3 s_4 s_5 s_6 s_7))
